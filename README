
# QEMU_STM32 README
===================

QEMU is a generic and open source machine & userspace emulator and
virtualizer.

This repo started as a clone from here, https://github.com/rurban/qemu-stm32/tree/stm32


# To build
mkdir arm_stm32; cd arm_stm32
../qemu-stm32/configure --disable-werror --enable-debug --target-list="arm-softmmu"     --extra-cflags=-DSTM32_UART_NO_BAUD_DELAY

# Available machines 
-m tsmv2 and -m tsmpro -m tsmu5

# To run

TSMV2

 ./arm-softmmu/qemu-system-arm -rtc base=localtime -machine tsmv2  -S -s   -kernel firmware_230.bin  -serial file:uart1.log -serial tcp::12344,server,nowait -serial tcp::12345,server,nowait  -d unimp,guest_errors

TSMPRO

 ./arm-softmmu/qemu-system-arm -rtc base=localtime -machine tsmpro  -S -s   -kernel firmware_265.bin  -serial file:uart1.log -serial tcp::12344,server,nowait -serial tcp::12345,server,nowait  -d unimp,guest_errors  -monitor stdio -trace "stm32*"


arm-none-eabi-gdb build/airsensor_d/firmware/bin/firmware_346.elf  -ex 'target extended-remote 192.168.4.1:2345'
or
gdb-multiarch  build/airsensor_d/firmware/bin/firmware_346.elf  -ex 'target extended-remote 192.168.4.1:2345'

# Attach to uart,
nc 127.0.0.1 12344

# Build for raspberry pi simulation

apt-get install libslirp-dev

../configure --disable-werror --enable-debug --enable-slirp 

# Start raspberry 3b

aarch64-softmmu/qemu-system-aarch64  \
    -M raspi3b \
    -cpu cortex-a72 \
    -append "rw earlyprintk loglevel=8 console=ttyAMA0,115200 dwc_otg.lpm_enable=0 root=/dev/mmcblk0p2 rootdelay=1" \
    -dtb bcm2710-rpi-3-b-plus.dtb \
    -drive format=raw,file=disk.img,if=sd \
    -kernel kernel8.img \
    -m 1G -smp 4 \
    -serial stdio \
    -usb -device usb-mouse -device usb-kbd \
	 -device usb-net,netdev=net0 \
	 -netdev user,id=net0,hostfwd=tcp::5555-:22 

# QNX on raspi 1b

bcm2835-rpi-b-plus.dts

aarch64-softmmu/qemu-system-aarch64  \
    -M raspi1b \
    -cpu arm1176  \
    -append "rw earlyprintk loglevel=8 console=ttyAMA0,115200 dwc_otg.lpm_enable=0 root=/dev/mmcblk0p2 rootdelay=1" \
    -dtb bcm2835-rpi-b-plus.dts \
    -drive format=raw,file=disk.img,if=sd \
    -kernel kernel.img \
    -m 1G -smp 4 \
    -serial stdio \
    -usb -device usb-mouse -device usb-kbd \
	 -device usb-net,netdev=net0 \
	 -netdev user,id=net0,hostfwd=tcp::5555-:22 


# Emulating Raspberry Pi 4 with Qemu

This repository contains raspi4b support


QEMU provides models of the following Raspberry Pi Boards:
| Machine      | Core          | Number of Cores | RAM     |
|--------------|---------------|-----------------|---------|
| raspi0       | ARM1176JZF-S  | 1               | 512 MiB |
| raspi1lap    | ARM1176JZF-S  | 1               | 512 MiB |
| raspi2b      | Cortex-A7     | 4               | 1 GB    |
| raspi3ap     | Cortex-A53    | 4               | 512 MiB |
| Raspi3b      | Cortex-A53    | 4               | 1 GB    |
| Raspi4b      | Cortex-a71    | 4               | 2 GB    |


```
qemu-system-aarch64   \
-M raspi4b            \
-cpu cortex-a72       \
-kernel kernel8.img   \
-append "earlycon=pl011,mmio32,0xfe201000 console=ttyAMA0,115200  console=tty1 rootfstype=ext4 fsck.repair=yes rootwait quiet rootwait ip=192.168.10.2"   \
-d unimp,guest_errors   \
-trace "bcm*"   \
-dtb bcm2711-rpi-4-b.dtb   \
-sd 2022-09-22-raspios-bullseye-arm64-lite.img   \
-m 2G -smp 4   \
-serial tcp::12344,server,nowait -serial tcp::12345,server,nowait   \
-usb -device usb-mouse -device usb-kbd    \
-device usb-net,netdev=net0    \
-netdev user,id=net0,hostfwd=tcp::5555-:22
```

Look here for more info on how to extract files from an image.
Note that latest versions do have problem mounting the file system, probably due to RPI5 support

https://github.com/Ebiroll/emulate-raspberry-in-qemu/



# Older but useful info 
This is how you would run with regular qemu

Just a quick update before we dive in: what we're actually doing here is running Raspberry Pi OS (64-bit) on a QEMU virtual ARM setup. This isn't full-blown hardware emulation of the Raspberry Pi 4, but more about creating a virtual environment for the OS. It doesn't mimic all the specific hardware features of the Pi 4, but it's pretty useful and great for general testing. I turned to this solution mainly to extract a modified sysroot from the Raspberry Pi OS, something not readily available in other resources. For those looking into detailed emulation of the actual Raspberry Pi 4's hardware in QEMU, check out this link for the latest updates: https://gitlab.com/qemu-project/qemu/-/issues/1208.

Shortcomings: No GUI yet, only console.

```
Steps
Download Raspberry Pi OS (64-bit) from Raspberry Pi operating system images.
Here we downloaded Raspberry Pi OS (64-bit) with desktop, Kernel version: 6.1, Debian version: 11 (bullseye), Release date: May 3rd 2023, named 2023-05-03-raspios-bullseye-arm64.img. We put it in /home/mydir.
Install the required packages on your host system:
$ # Cross compilers for arm64
$ sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

$ # Qemu itself
$ sudo apt install qemu qemubuilder qemu-system-gui qemu-system-arm qemu-utils \
    qemu-system-data qemu-system
Build the Linux kernel for qemu arm64 (You can download the kernel from Kernel.org):
$ wget https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.1.34.tar.xz
$ tar xvJf linux-6.1.34.tar.xz
$ cd linux-6.1.34

$ # create a .config file
$ ARCH=arm64 CROSS_COMPILE=/bin/aarch64-linux-gnu- make defconfig
$ # Use the kvm_guest config as the base defconfig, which is suitable for qemu
$ ARCH=arm64 CROSS_COMPILE=/bin/aarch64-linux-gnu- make kvm_guest.config
$ # Build the kernel
$ ARCH=arm64 CROSS_COMPILE=/bin/aarch64-linux-gnu- make -j8

$ cp arch/arm64/boot/Image /home/mydir
Mount the image for enabling ssh and configuring username and password:

Get the correct offset value with the help of fdisk utility:
$ fdisk -l 2023-05-03-raspios-bullseye-arm64.img
Disk 2023-05-03-raspios-bullseye-arm64.img: 4.11 GiB, 4412407808 bytes, 8617984 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x3e247b30
Device                                 Boot  Start     End Sectors  Size Id Type
2023-05-03-raspios-bullseye-arm64.img1        8192  532479  524288  256M  c W95 FAT32 (LBA)
2023-05-03-raspios-bullseye-arm64.img2      532480 8617983 8085504  3.9G 83 Linux
As we can see, we have two partitions inside the downloaded image. The first device (partition) is the bootable partition, and the second one is the root filesystem. The first partition is what will be mounted as /boot in Raspberry Pi, and this is where we'll need to create some files.

Obtain the correct offset of the first device by multiplying the start of the first partition (here 8192) by the sector size (here 512). Here it will be calculated as 8192 * 512 = 4194304

Mount the image in /mnt/rpi directory:
$ sudo mkdir /mnt/rpi
$ sudo mount -o loop,offset=4194304 2023-05-03-raspios-bullseye-arm64.img /mnt/rpi
Create a file named ssh to enable ssh:
$ cd /mnt/rpi
$ sudo touch ssh
Additionally, create a file named userconf.txt in the same directory and put your desired username and password there, like <username>:<hashed-password> (might be better to leave the username as pi). This will be your default credentials:
$ openssl passwd -6                                     # Generate the <hashed-password>
$ echo 'pi:<hashed-password>' | sudo tee userconf.txt   # Put them inside `userconf.txt`
Finally, unmount the image:
$ sudo umount /mnt/rpi
Run qemu emulator:
$ cd /home/mydir
$ qemu-system-aarch64 -machine virt -cpu cortex-a72 -smp 6 -m 4G \
    -kernel Image -append "root=/dev/vda2 rootfstype=ext4 rw panic=0 console=ttyAMA0" \
    -drive format=raw,file=2023-05-03-raspios-bullseye-arm64.img,if=none,id=hd0,cache=writeback \
    -device virtio-blk,drive=hd0,bootindex=0 \
    -netdev user,id=mynet,hostfwd=tcp::2222-:22 \
    -device virtio-net-pci,netdev=mynet \
    -monitor telnet:127.0.0.1:5555,server,nowait
This machine will be able to access the internet.
After the machine is completely booted up, you can login to it from your computer by using ssh and the username and password you specified:
$ ssh -l pi localhost -p 2222
Done!

Troubleshooting
If you had any problem with connecting to internet, it might be because of bad DNS configurations, and you should consider adding nameserver 8.8.8.8 to top of the file /etc/resolv.conf in the machine.
You can access the qemu monitor console with:
$ telnet localhost 5555
```


# Unimplemeted devices,
Now it should work, but we need more testing.


If you start qemu manually you can use this to launch the debugger
# launch.json
```
        {
            "name": "Cortex external qemu Debug",
            "cwd": "${workspaceFolder}",
            "executable": "./build/airsensor_d/firmware/bin/firmware_230.elf",
            "gdbPath": "/usr/bin/gdb-multiarch",
            "request": "attach",
            "type": "cortex-debug",
            "runToEntryPoint": "main",
            "runToMain": true,
            "showDevDebugOutput": "raw",
            "servertype": "external",
            "gdbTarget": "127.0.0.1:1234",
            "host": "localhost",
            "interface": "tcp",
            "port": 2345
        }
```

# Launch of binary built with CUBE-IDE
```
        {
            "name": "Cortex external qemu Debug",
            "cwd": "${workspaceFolder}/STM32CubeIDE/Debug",
            "executable": "${workspaceFolder}/STM32CubeIDE/Debug/FreeRTOS_MPU.elf",
            "gdbPath": "/usr/bin/gdb-multiarch",
            "preAttachCommands": [
                "set substitute-path C:/ /mnt/c/",
            ],
            "request": "attach",
            "type": "cortex-debug",
            "runToEntryPoint": "main",
            "runToMain": true,
            "showDevDebugOutput": "none",
            "servertype": "qemu",
            "cpu": "cortex-m33",
            "machine": "tsmpro",
            "gdbTarget": "127.0.0.1:1234",
            "host": "localhost",
            "interface": "tcp",
            "port": 2345,
            "sourceFileMap": {
                "C:/":"/mnt/c/" 
            },
        },    
```